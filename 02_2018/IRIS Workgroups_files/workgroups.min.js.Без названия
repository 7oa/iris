"use strict";

angular.module('irisApp').config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.when('', '/workgroups').when('#', '/workgroups').when('/', '/workgroups');
    $stateProvider.state('workgroups', {
        url: "/workgroups",
        templateUrl: iris.config.moduleUrl + '/templates/workgroups.main.html',
        controller: 'WorkgroupsMainCtrl',
        resolve: {
            'companies': function companies(CompaniesService) {
                return CompaniesService.getCompanies();
            },
            'users': function users(UserService) {
                return UserService.getPreloadedUsers();
            }
        }
    });
}]);
'use strict';

angular.module('irisApp').controller('WorkgroupsMainCtrl', ["$scope", "$controller", "$timeout", "$translate", "$filter", "companies", "users", "UserGroupsService", "ModuleFolderService", "TasksService", "ProjectsService", "IrisModuleFilterService", function ($scope, $controller, $timeout, $translate, $filter, companies, users, UserGroupsService, ModuleFolderService, TasksService, ProjectsService, IrisModuleFilterService) {
    angular.extend($scope, $controller('SecurityMixin', { $scope: $scope }));

    $scope.workgroups = [];
    $scope.companies = companies;
    $scope.users = users;
    $scope.filteredWorkgroups = [];
    $scope.projects = ProjectsService.getPreloadedProjects();

    $scope.sidebarParams = {};
    $scope.sidebarParams.showAllUsers = false;
    $scope.isAdmin = iris.config.me.isAdmin;

    $scope.rightSidebar = {
        isOpen: false
    };

    $scope.getTaskUrl = function (task) {
        return TasksService.getTaskViewUrl(task.id);
    };

    $scope.getCompanyPrefix = function (workgroup) {
        if (!workgroup || !workgroup.companyId) return '';
        return '[' + $filter('IrisFilterField')(workgroup.companyId, [$scope.companies]) + '] ';
    };

    $scope.selectedItem = null;

    $scope.forms = {};

    $scope.filterMeta = UserGroupsService.getFilterMeta();
    $scope.$on("iris-filter.applied", function (e, data) {
        $scope.filterWorkgroups();
    });

    $scope.filterDefault = {
        isActive: {
            'true': true,
            'false': false
        }
    };
    $scope.filter = angular.copy($scope.filterDefault);

    $scope.filterWorkgroups = function () {
        $timeout(function () {
            var res = $scope.workgroups;
            if ($scope.filter.name) res = res.filter(function (p) {
                return p.name.indexOf($scope.filter.name) >= 0;
            });

            if ($scope.filter.isActive && $scope.filter.isActive['true'] !== $scope.filter.isActive['false']) res = res.filter(function (p) {
                return p.isActive == $scope.filter.isActive['true'];
            });
            if ($scope.filter.companyIds && $scope.filter.companyIds.length) res = res.filter(function (p) {
                return !!$scope.filter.companyIds.find(function (ci) {
                    return p.companyId == ci;
                });
            });
            if ($scope.filter.userIds && $scope.filter.userIds.length) res = res.filter(function (p) {
                return !!p.users.find(function (u) {
                    return !!$scope.filter.userIds.find(function (ui) {
                        return u.id == ui;
                    });
                });
            });
            if ($scope.filter.isMy && $scope.filter.isMy['true']) res = res.filter(function (p) {
                return !!p.users.find(function (u) {
                    return u.id == iris.config.me.id;
                });
            });

            if ($scope.selectedItem && !res.find(function (p) {
                return p.id == $scope.selectedItem.id;
            })) $scope.selectItem(null);
            $scope.filteredWorkgroups = res;
        });
    };

    function refreshWorkgroups() {
        return UserGroupsService.getWorkgroups().then(function (wRes) {
            $scope.workgroups = wRes;
            $scope.filterWorkgroups();
        });
    }
    refreshWorkgroups();

    $scope.createItem = function () {
        $scope.selectItem(UserGroupsService.createWorkgroup());
        $scope.rightSidebar.isOpen = true;
        $scope.withCompany = false;
    };

    $scope.selectItem = function (item) {
        $scope.selectedItem = item ? angular.copy(item) : null;
        $scope.rightSidebar.isOpen = !!$scope.selectedItem;

        if ($scope.selectedItem != null) {
            $scope.withCompany = !!$scope.selectedItem.companyId;
            var params = {
                limit: 6,
                'order-by': angular.toJson([{
                    name: 'updatedOn',
                    value: 'desc'
                }]),
                filter: angular.toJson([{ f: 'workGroupId', v: [item.id] }])
            };

            TasksService.getTasks(params).then(function (tasks) {
                $scope.lastUpdatedTasks = tasks;
            });
        }

        $scope.editMode = false;
    };

    $scope.setEditMode = function (val) {
        if (!$scope.editMode && !val) $scope.selectItem(null);
        $scope.editMode = val;
    };

    $scope.saveSelectedItem = function () {
        UserGroupsService.saveWorkgroup($scope.selectedItem).then(function (sRes) {
            refreshWorkgroups().then(function () {
                $scope.selectItem(sRes);
            });
        });
    };

    $scope.selectIcon = function () {
        ModuleFolderService.openModuleFilesModalExtended('PROCESS_MGMT', [{
            name: "Workgroups",
            subjectId: 0,
            folderName: "Workgroups",
            isSecured: false
        }], ".jpg, .jpeg, .png").then(function (file) {
            $scope.selectedItem.imageFileId = file.id;
        });
    };

    $scope.clearIcon = function () {
        $scope.selectedItem.imageFileId = null;
    };

    $scope.addUser = function (user) {
        if ($scope.selectedItem.id) {
            UserGroupsService.addUserToGroup($scope.selectedItem.id, user.id).then(function (userGroup) {
                refreshWorkgroups();
                $scope.selectedItem = userGroup;
            });
        } else {
            $scope.selectedItem.users = $scope.selectedItem.users || [];
            $scope.selectedItem.users.push(user);
        }
    };

    $scope.removeUser = function (user) {
        if ($scope.selectedItem.id) {
            UserGroupsService.removeUserFromGroup($scope.selectedItem.id, user.id).then(function (userGroup) {
                refreshWorkgroups();
                $scope.selectedItem = userGroup;
            });
        } else {
            $scope.selectedItem.users.splice($scope.selectedItem.users.findIndex(function (u) {
                return u.id == user.id;
            }), 1);
        }
    };

    $scope.removeWorkgroup = function (item) {
        alertify.confirm($translate.instant('message.DeleteItemConfirm'), function (e) {
            if (e) {
                UserGroupsService.removeUserGroup(item).then(function () {
                    alertify.success($translate.instant('message.DeleteItemSuccessful'));
                    $scope.selectedItem = null;
                    refreshWorkgroups();
                });
            }
        });
    };
}]);