'use strict';

(function () {
    angular.module('irisApp').controller('DashboardBaseCtrl', ["$scope", "DashboardService", "DashboardsService", function ($scope, DashboardService, DashboardsService) {

        var toolbar = $('.app-toolbar');

        $scope.toggleFullScreen = function () {
            $scope.fullScreenModeIsActive = DashboardService.toggleFullScreen(false, ['.sub-toolbar', '.app-sidebar-left']);
        };

        $(document).bind('webkitfullscreenchange mozfullscreenchange fullscreenchange', function () {
            var isFullScreen = document.fullScreen || document.mozFullScreen || document.webkitIsFullScreen;

            if (!isFullScreen) {
                $scope.fullScreenModeIsActive = DashboardService.toggleFullScreen(true, ['.sub-toolbar', '.app-sidebar-left']);
                $scope.$apply();
            }
        });

        $scope.showToolbar = function (c) {
            if (!$scope.fullScreenModeIsActive) return;

            if (!c && toolbar.css('opacity') == 0) {
                toolbar.css({ opacity: 1 });
            } else if ($(c).css('opacity') == 0) $(c).css({ opacity: 1 });
        };

        $scope.hideToolbar = function (c) {
            if (!$scope.fullScreenModeIsActive) return;

            if (!c && toolbar.css('opacity') == 1) {
                toolbar.css({ opacity: 0 });
            } else if ($(c).css('opacity') == 1) $(c).css({ opacity: 0 });
        };
    }]);
})();
'use strict';

angular.module('irisApp').controller('DashboardEditModalCtrl', ["$scope", "$translate", "dashboard", function ($scope, $translate, dashboard) {
    $scope.dashboard = dashboard;

    $scope.accept = function () {
        $scope.$close($scope.dashboard);
    };
}]);
'use strict';

(function () {
    angular.module('irisApp').controller('DashboardRootCtrl', ["$scope", "$controller", "$state", "$uibModal", "$translate", "dashboards", "DashboardsService", "WidgetService", "ReportsService", "UserService", function ($scope, $controller, $state, $uibModal, $translate, dashboards, DashboardsService, WidgetService, ReportsService, UserService) {

        angular.extend($scope, $controller('SecurityMixin', { $scope: $scope }));
        angular.extend($scope, $controller('DashboardBaseCtrl', { $scope: $scope }));

        $scope.currentUser = iris.config.me;
        $scope.moduleUrl = iris.config.moduleUrl;
        $scope.dashboards = dashboards;

        $scope.dashboardModes = DashboardsService.getDashboardModeList(); //.filter(t => t.id != 'VIEW');

        function goToDashboard(id) {
            $state.go("dashboards.view", { dashboardId: id });
        }

        function init() {
            $scope.root = {
                dashboardMode: 'VIEW'
            };

            if ($scope.currentUser && $scope.currentUser.profile && $scope.currentUser.profile.dashboardId && !$state.params['dashboardId']) {
                $scope.root.dashboardId = $scope.currentUser.profile.dashboardId;
                $scope.root.hasFavoriteDashboard = true;
            } else {
                $scope.root.dashboardId = $state.params['dashboardId'];
                $scope.root.hasFavoriteDashboard = false;
            }

            var dashboard = $scope.dashboards.find(function (d) {
                return d.id == $state.params['dashboardId'];
            });
            if (dashboard) $scope.root.dashboard = dashboard;

            if ($scope.root.dashboardId && dashboards.find(function (t) {
                return t.id == $scope.root.dashboardId;
            })) {
                goToDashboard($scope.root.dashboardId);
            } else goToDashboard(dashboards[0].id);
        }
        init();

        function openDashboardModal(item) {
            return $uibModal.open({
                templateUrl: $scope.moduleUrl + '/templates/dashboard.edit.modal.html',
                size: 'md',
                resolve: {
                    'dashboard': function dashboard() {
                        return item;
                    }
                },
                controller: 'DashboardEditModalCtrl'
            }).result;
        }

        $scope.addDashboard = function () {
            openDashboardModal(DashboardsService.createDefaultDashboard()).then(function (dRes) {
                $scope.saveDashboard(dRes).then(function (sRes) {
                    $scope.$emit('updateDashboards');
                    $scope.dashboards.push(sRes);
                    goToDashboard(sRes.id);
                });
            });
        };

        $scope.editDashboard = function (item) {
            openDashboardModal(item).then(function (dRes) {
                $scope.saveDashboard(dRes).then(function (sRes) {
                    $scope.$emit('updateDashboards');
                    var dashboardIndex = $scope.dashboards.findIndex(function (t) {
                        return t.id == sRes.id;
                    });
                    if (dashboardIndex >= 0) $scope.dashboards[dashboardIndex] = sRes;
                });
            });
        };

        $scope.removeDashboard = function (item) {
            alertify.confirm($translate.instant('message.DeleteItemConfirm'), function (e) {
                if (e) {
                    DashboardsService.removeDashboard(item).then(function () {
                        $scope.$emit('updateDashboards');
                        alertify.success($translate.instant('message.DeleteItemSuccessful'));
                        $scope.toggleFullScreen();
                        $state.go("dashboards", { dashboardId: null }, { reload: true, inherit: false });
                    });
                }
            });
        };

        $scope.saveDashboard = function (item) {
            return ReportsService.save(item || $scope.root.dashboard);
        };

        $scope.addWidget = function () {
            $scope.root.dashboardApi && $scope.root.dashboardApi.addWidget();
        };

        $scope.setDefault = function (value) {
            if (value) {
                UserService.saveDefaultDashboard($state.params['dashboardId']).then(function () {
                    $scope.currentUser.profile.dashboardId = $state.params['dashboardId'];
                    $scope.root.hasFavoriteDashboard = value;
                });
            } else {
                UserService.removeDefaultDashboard(null).then(function () {
                    $scope.root.hasFavoriteDashboard = value;
                });
            }
        };

        $scope.sharingAllowed = function () {
            return !$scope.root.dashboard ? false : iris.config.me.isAdmin || $scope.root.dashboard.createdBy === iris.config.me.id;
        };

        $scope.openShareModal = function () {
            return $uibModal.open({
                templateUrl: iris.config.moduleUrl + "/templates/dashboard.sharing-modal.html",
                controller: 'DashboardSharingModalCtrl',
                resolve: {
                    'dashboard': function dashboard() {
                        return $scope.root.dashboard;
                    }
                }
            }).result.then(function (res) {
                $scope.saveDashboard(res).then(function () {
                    $scope.$emit('updateDashboards');
                });
            });
        };
    }]);
})();
'use strict';

(function () {
    angular.module('irisApp').controller('DashboardSharingModalCtrl', ["$scope", "$stateParams", "dashboard", "$translate", function ($scope, $stateParams, dashboard, $translate) {

        $scope.sharingTypes = [{ value: 'PRIVATE', label: $translate.instant('label.Private') }, { value: 'SPECIFIC', label: $translate.instant('label.Specific') }, { value: 'PUBLIC', label: $translate.instant('label.Public') }];

        if (dashboard) {
            $scope.dashboard = dashboard;
        } else {
            $scope.dashboard = {
                id: $stateParams.templateId,
                shareType: 'PRIVATE'
            };
        }

        $scope.shareParams = {
            subject: 'Report',
            subjectId: $scope.dashboard.id,
            shareType: $scope.dashboard.shareType || 'PRIVATE'
        };

        $scope.accept = function () {
            $scope.dashboard.shareType = $scope.shareParams.shareType;
            $scope.$close($scope.dashboard);
        };
    }]);
})();
"use strict";

angular.module('irisApp').config(["$stateProvider", "$urlRouterProvider", function ($stateProvider, $urlRouterProvider) {
    $urlRouterProvider.when('', '/dashboards').when('/', '/dashboards');

    $stateProvider.state('dashboards', {
        url: "/dashboards",
        templateUrl: iris.config.moduleUrl + '/templates/dashboard.root.html',
        controller: 'DashboardRootCtrl',
        resolve: {
            'dashboards': function dashboards($translate, DashboardsService, ReportsService) {
                return DashboardsService.requestDashboards().$promise.then(function (dRes) {
                    if (dRes && dRes.length) {
                        return dRes;
                    } else {
                        return ReportsService.save(DashboardsService.createDefaultDashboard($translate.instant('label.MyDashboard'))).then(function (newRes) {
                            return DashboardsService.addDefaultWidgets(newRes).then(function (wRes) {
                                return [wRes];
                            });
                        });
                    }
                });
            },
            'widgets': function widgets(WidgetService) {
                return WidgetService.getWidgets().$promise;
            }
        }
    }).state('dashboards.view', {
        url: "/:dashboardId/view",
        templateUrl: iris.config.moduleUrl + '/templates/dashboard.view.html',
        controller: 'DashboardViewCtrl',
        resolve: {
            'dashboard': function dashboard($stateParams, ReportsService) {
                return ReportsService.getReport($stateParams['dashboardId']);
            }
        }
    });
}]);
'use strict';

(function () {
    angular.module('irisApp').controller('DashboardViewCtrl', ["$scope", "$state", "dashboard", function ($scope, $state, dashboard) {
        $scope.root.dashboardId = $state.params['dashboardId'];
        $scope.root.hasFavoriteDashboard = $scope.currentUser.profile.dashboardId == $state.params['dashboardId'];
        $scope.root.dashboard = dashboard;
    }]);
})();
'use strict';

(function () {
    angular.module('irisApp').controller('IrisDashboardBaseCtrl', ["$scope", "$uibModal", "WidgetService", "WidgetTypeService", "DashboardsService", "ReportsService", function ($scope, $uibModal, WidgetService, WidgetTypeService, DashboardsService, ReportsService) {
        $scope.saveDashboard = function (silent) {
            return ReportsService[silent ? 'saveOnly' : 'save']($scope.dashboard);
        };

        $scope.saveWidget = function (item) {
            if (!item) return Promise.resolve();
            return WidgetService.saveOnly(item);
        };

        $scope.rowHaveWidget = function (row) {
            for (var colIndex = 0; colIndex < row.columns.length; colIndex++) {
                if (row.columns[colIndex].widget_id) return true;
                if (row.columns[colIndex].rows) {
                    for (var rowIndex = 0; rowIndex < row.columns[colIndex].rows.length; rowIndex++) {
                        if ($scope.rowHaveWidget(row.columns[colIndex].rows[rowIndex])) return true;
                    }
                }
            }
            return false;
        };

        $scope.widgetTypes = WidgetTypeService.getWidgetTypes();

        $scope.addWidget = function (cell) {
            $uibModal.open({
                templateUrl: iris.config.baseUrl + '/modules/dashboard/templates/iris-dashboard.widget-select.modal.html',
                size: 'lg',
                resolve: {
                    'activeModules': function activeModules(ModuleService) {
                        return ModuleService.getActiveModules();
                    },
                    'widgetTypes': function widgetTypes() {
                        return $scope.widgetTypes.filter(function (t) {
                            return !!t.module;
                        });
                    }
                },
                controller: 'IrisDashboardWidgetSelectModalCtrl'
            }).result.then(function (wRes) {
                var widget = WidgetService.createWidget(wRes.directive, $scope.dashboard.id, $scope.dashboard.timeType);
                cell || (cell = DashboardsService.getFreeLayoutCell($scope.dashboard.settings.layouts[0]));
                ReportsService.setWidget($scope.dashboard, widget, cell).then(function () {
                    $scope.saveDashboard();
                });
            });
        };

        $scope.removeWidget = function (row, index) {
            alertify.confirm($translate.instant("text.RemoveWidgetConfirm"), function (e) {
                if (e) {
                    ReportsService.clearCell($scope.dashboard, row, index);
                    $scope.saveDashboard();
                }
            });
        };

        $scope.configWidget = function (widgetId) {
            var widgetIndex = $scope.dashboard.widgets.findIndex(function (t) {
                return t.id == widgetId;
            });
            if (widgetIndex < 0) return;
            var widgetType = $scope.widgetTypes.find(function (t) {
                return t.directive == $scope.dashboard.widgets[widgetIndex].directive;
            });
            if (!widgetType) return;
            var widgetCell = DashboardsService.findLayoutWidget($scope.dashboard.settings.layouts[0], widgetId);

            $uibModal.open({
                templateUrl: iris.config.baseUrl + '/modules/dashboard/templates/iris-dashboard.widget-config.modal.html',
                size: 'md',
                resolve: {
                    'widget': function widget() {
                        return WidgetService.getWidget(widgetId);
                    },
                    'configViewUrl': function configViewUrl() {
                        return widgetType.configViewUrl;
                    },
                    'configController': function configController() {
                        return widgetType.configController;
                    }
                },
                controller: 'IrisDashboardWidgetConfigModalCtrl'
            }).result.then(function (cRes) {
                WidgetService.save(cRes).then(function (sRes) {
                    $scope.dashboard.widgets[widgetIndex] = angular.copy(sRes);
                    // workaround to call widget rebuild
                    widgetCell.row.columns[widgetCell.cellIndex] = angular.copy(widgetCell.row.columns[widgetCell.cellIndex]);
                });
            });
        };
    }]);
})();
'use strict';

(function () {
    angular.module('irisApp').directive('irisDashboardColumnResizer', ["$controller", "$timeout", "$document", function ($controller, $timeout, $document) {
        return {
            restrict: 'AE',
            replace: true,

            scope: {
                row: '=',
                column: '=',
                active: '=',
                dashboard: '='
            },

            template: '<div class="dashboard-resizer dashboard-column-resizer" ng-class="{\'active\': active}"></div>',

            controller: ["$scope", "$element", "$attrs", function ($scope, $element, $attrs) {
                angular.extend($scope, $controller('IrisDashboardSizeCtrl', { $scope: $scope }));

                var rulerElement, rulerPointElement, leftElements, rightElements, siblingColumn, initialWidth, initialSiblingWidth, colShift;

                function processResize(shift) {
                    colShift = shift;
                    $scope.column.width = initialWidth + colShift;
                    siblingColumn.width = initialSiblingWidth - colShift;
                    $timeout(function () {
                        return $scope.$apply();
                    });
                }

                function finishResize(e) {
                    $document.off('mouseup', finishResize);

                    if (colShift) {
                        $scope.column.width = initialWidth + colShift;
                        siblingColumn.width = initialSiblingWidth - colShift;
                        $scope.saveDashboard();
                    }

                    rulerElement.remove();
                    $element.removeClass("resizer");
                }

                function highlightSteps(array, pos) {
                    for (var k = 0; k < array.length; k++) {
                        if (k <= pos) array[k].addClass("resizer");else array[k].removeClass("resizer");
                    }
                }

                function appendPoint(elem, shift) {
                    rulerPointElement.css("left", shift);
                    elem.append(rulerPointElement);
                }

                function getRuler(x, y) {
                    var res = angular.element("<div class='dashboard-column-resizer-ruler'></div>"),
                        innerX = 0;

                    var _loop = function _loop(i) {
                        var leftElement = angular.element("<div class='dashboard-column-resizer-ruler-step'></div>");
                        leftElement.on("mouseenter", function (e) {
                            appendPoint(angular.element(e.target), 0);
                            processResize(-(i + 1));
                            highlightSteps(leftElements, i);
                            highlightSteps(rightElements, -1);
                        });
                        leftElements.unshift(leftElement);
                        res.append(leftElement);
                        innerX += 20;
                    };

                    for (var i = $scope.freeExpandLeft($scope.row, siblingColumn) - 1; i >= 0; i--) {
                        _loop(i);
                    }

                    var _loop2 = function _loop2(j) {
                        var rightElement = angular.element("<div class='dashboard-column-resizer-ruler-step'></div>");
                        rightElement.on("mouseenter", function (e) {
                            appendPoint(angular.element(e.target), 20);
                            processResize(j + 1);
                            highlightSteps(leftElements, -1);
                            highlightSteps(rightElements, j);
                        });
                        rightElements.push(rightElement);
                        res.append(rightElement);
                    };

                    for (var j = 0; j < $scope.freeExpandRight($scope.row, $scope.column); j++) {
                        _loop2(j);
                    }

                    var centerElement = angular.element("<div class='dashboard-column-resizer-ruler-center'></div>");
                    centerElement.css("left", innerX + "px");
                    centerElement.on("mouseenter", function (e) {
                        appendPoint(angular.element(e.target), 5);
                        processResize(0);
                        highlightSteps(leftElements, -1);
                        highlightSteps(rightElements, -1);
                    });
                    res.append(centerElement);

                    rulerPointElement = angular.element("<div class='dashboard-column-resizer-ruler-point'></div>");
                    rulerPointElement.css("top", 10);
                    appendPoint(centerElement, 5);

                    res.css("left", x - innerX);
                    res.css("top", y);
                    return res;
                }

                function initResize(e) {
                    $element.addClass("resizer");

                    leftElements = [];
                    rightElements = [];

                    siblingColumn = $scope.row.columns[$scope.row.columns.indexOf($scope.column) + 1];
                    initialWidth = $scope.column.width;
                    initialSiblingWidth = siblingColumn.width;

                    rulerElement && rulerElement.remove();
                    rulerElement = getRuler(e.clientX, e.clientY - 10);
                    $document.find("body").eq(0).append(rulerElement);

                    $document.on('mouseup', finishResize);
                }

                $element.on('mousedown', initResize);
            }],

            link: function link(scope, element, attrs) {}
        };
    }]);
})();
'use strict';

(function () {
    angular.module('irisApp').directive('irisDashboard', ["$controller", function ($controller) {
        return {
            restrict: 'AE',
            replace: true,

            scope: {
                dashboard: '=',
                mode: '=',
                api: '=?'
            },

            templateUrl: iris.config.baseUrl + '/modules/dashboard/templates/iris-dashboard.html',

            controller: ["$scope", "$element", "$attrs", function ($scope, $element, $attrs) {
                angular.extend($scope, $controller('IrisDashboardBaseCtrl', { $scope: $scope }));
            }],

            link: function link(scope, element, attrs) {
                scope.api = {
                    addWidget: scope.addWidget
                };
            }
        };
    }]);
})();
'use strict';

(function () {
    angular.module('irisApp').controller('IrisDashboardDragCtrl', ["$scope", "$q", "DashboardsService", function ($scope, $q, DashboardsService) {
        var dashboardElement = angular.element('#iris-dashboard');

        $scope.widgetDragStart = function () {
            dashboardElement.addClass('bordered');
        };

        function widgetDragEndCore() {
            dashboardElement.removeClass('bordered');
        }

        $scope.widgetDragEnd = widgetDragEndCore;

        function widgetDropCore(widgetId, dropData) {
            if (!widgetId || !dropData || !$scope.isMyDashboard()) return;

            var dragCell = DashboardsService.findWidgetCell($scope.dashboard.settings.layouts[0], widgetId),
                widgetSavePromises = [];

            if (dragCell) {
                var swap = angular.copy(dragCell);

                dragCell.widget_id = dropData.widget_id;
                // workaround to swap widgets height
                if (dropData.row.columns[dropData.colIndex].widget_id) {
                    swap.widgetEntity.settings.height = dropData.height;
                    widgetSavePromises.push($scope.saveWidget(swap.widgetEntity));
                }

                dropData.row.columns[dropData.colIndex].widget_id = swap.widget_id;
                // workaround to swap widgets height
                if (dropData.row.columns[dropData.colIndex].widgetEntity) {
                    swap = dropData.row.columns[dropData.colIndex];
                    swap.widgetEntity.settings.height = dragCell.widgetEntity.settings.height;
                    widgetSavePromises.push($scope.saveWidget(swap.widgetEntity));
                }
            }

            $q.all(widgetSavePromises).then(function () {
                widgetDragEndCore();
                $scope.saveDashboard();
            });
        }

        $scope.widgetDrop = function (dragData, dropData) {
            var widgetId = dragData.getData("widgetId");

            if (dropData['widget_id'] == widgetId) return;
            widgetDropCore(widgetId, dropData);
        };
    }]);
})();
'use strict';

(function () {
    angular.module('irisApp').controller('IrisDashboardLayoutCtrl', ["$scope", "$translate", "$controller", "DashboardsService", "ReportsService", function ($scope, $translate, $controller, DashboardsService, ReportsService) {
        angular.extend($scope, $controller('IrisDashboardSizeCtrl', { $scope: $scope }));
        angular.extend($scope, $controller('IrisDashboardDragCtrl', { $scope: $scope }));

        $scope.canRemoveWidget = function (row, col) {
            return !!col.widget_id;
        };
        $scope.canRemoveColumn = function (row, col) {
            return row.columns.length > 1;
        };
        $scope.canRemoveRow = function (layout, row) {
            return layout.rows.length > 1;
        };

        $scope.canAddColumn = function (row) {
            return row.columns.length < DashboardsService.getMaxColumns();
        };

        $scope.addColumnLeft = function (row, col) {
            DashboardsService.addColumn(row, row.columns.indexOf(col));
            $scope.saveDashboard();
        };

        $scope.addColumnRight = function (row, col) {
            DashboardsService.addColumn(row, row.columns.indexOf(col) + 1);
            $scope.saveDashboard();
        };

        $scope.removeColumn = function (row, col) {
            col.removing = true;
            alertify.confirm($translate.instant('message.DeleteItemConfirm'), function (e) {
                col.removing = false;
                if (e) {
                    DashboardsService.removeColumn(row, row.columns.indexOf(col));
                    $scope.saveDashboard();
                } else $scope.$apply();
            });
        };

        $scope.addRowTop = function (layout, row, inner) {
            DashboardsService[inner ? 'addDefaultCellRow' : 'addDefaultRow'](layout, layout.rows.indexOf(row));
            $scope.saveDashboard();
        };

        $scope.addRowBottom = function (layout, row, inner) {
            DashboardsService[inner ? 'addDefaultCellRow' : 'addDefaultRow'](layout, layout.rows.indexOf(row) + 1);
            $scope.saveDashboard();
        };

        $scope.removeRow = function (layout, row) {
            row.removing = true;
            alertify.confirm($translate.instant('message.DeleteItemConfirm'), function (e) {
                row.removing = false;
                if (e) {
                    DashboardsService.removeRow(layout, layout.rows.indexOf(row));
                    $scope.saveDashboard();
                } else $scope.$apply();
            });
        };

        $scope.addCellRow = function (col) {
            col.rows || (col.rows = []);
            if (!col.rows || !col.rows.length) {
                if (col.widget_id) col.rows.push({ index: 0, columns: [angular.extend(angular.copy(col), { width: 12 })] });else DashboardsService.addDefaultCellRow(col);
                delete col.widget_id;
                delete col.widgetEntity;
            }
            DashboardsService.addDefaultCellRow(col, col.rows.length);
            $scope.saveDashboard();
        };

        $scope.removeColumnWidget = function (row, col) {
            alertify.confirm($translate.instant("text.RemoveWidgetConfirm"), function (e) {
                if (e) {
                    ReportsService.clearCell($scope.dashboard, row, row.columns.indexOf(col));
                    $scope.saveDashboard();
                }
            });
        };

        $scope.removeColumnLayout = function (col) {
            col.removing = true;
            alertify.confirm($translate.instant('message.dashboards.ClearCellLayoutConfirm'), function (e) {
                col.removing = false;
                if (e) {
                    col.rows.forEach(function (r) {
                        r.columns.forEach(function (c) {
                            ReportsService.clearCell($scope.dashboard, r, r.columns.indexOf(c));
                        });
                    });

                    col.rows = [];
                    col.widget_id = null;
                    delete col.widgetEntity;

                    $scope.saveDashboard();
                } else $scope.$apply();
            });
        };
    }]);
})();
'use strict';

(function () {
    angular.module('irisApp').directive('irisDashboardRowResizer', ["$controller", "$timeout", "$document", function ($controller, $timeout, $document) {
        return {
            restrict: 'AE',
            replace: true,

            scope: {
                row: '=',
                parentCell: '=?',
                active: '='
            },

            template: '<div class="dashboard-resizer dashboard-row-resizer" ng-class="{\'active\': active}"></div>',

            controller: ["$scope", "$element", "$attrs", function ($scope, $element, $attrs) {
                angular.extend($scope, $controller('IrisDashboardSizeCtrl', { $scope: $scope }));

                var initialY, initialHeight, initialSiblingHeight, block;

                function processResize(e, saveWidgets) {
                    if (block) return;

                    var delta = initialY - e.clientY;
                    $scope.resizeRow($scope.row, initialHeight - delta, saveWidgets);
                    if ($scope.parentCell) $scope.resizeRow($scope.parentCell.rows[$scope.parentCell.rows.indexOf($scope.row) + 1], initialSiblingHeight + delta, saveWidgets);

                    block = true;
                    $timeout(function () {
                        return block = false;
                    }, 100);
                }

                function finishResize(e) {
                    processResize(e, true);

                    $document.off('mousemove', processResize);
                    $document.off('mouseup', finishResize);

                    $element.removeClass("resizer");
                }

                function initResize(e) {
                    $element.addClass("resizer");

                    initialY = e.clientY;
                    initialHeight = $scope.getRowHeight($scope.row);
                    initialSiblingHeight = $scope.parentCell && $scope.getRowHeight($scope.parentCell.rows[$scope.parentCell.rows.indexOf($scope.row) + 1]);

                    $document.on('mousemove', processResize);
                    $document.on('mouseup', finishResize);
                }

                $element.on('mousedown', initResize);
            }],

            link: function link(scope, element, attrs) {}
        };
    }]);
})();
'use strict';

(function () {
    angular.module('irisApp').directive('irisDashboardRow', ["$controller", "ReportsService", function ($controller, ReportsService) {
        return {
            restrict: 'AE',
            replace: true,

            scope: {
                dashboard: '=',
                mode: '=',
                layout: '=',
                row: '=',
                parentLayout: '=?',
                parentRow: '=?'
            },

            templateUrl: iris.config.baseUrl + '/modules/dashboard/templates/iris-dashboard.row.html',

            controller: ["$scope", "$element", "$attrs", function ($scope, $element, $attrs) {
                angular.extend($scope, $controller('IrisDashboardLayoutCtrl', { $scope: $scope }));

                $scope.isMyDashboard = function () {
                    return $scope.dashboard && (iris.config.me.isAdmin || $scope.dashboard.createdBy === iris.config.me.id);
                };;
                $scope.canLayout = function () {
                    return $scope.isMyDashboard() && $scope.mode == 'LAYOUT';
                };

                $scope.getWidgetName = function (widgetId) {
                    if (!$scope.dashboard || !$scope.dashboard.widgets || !widgetId) return;
                    var widget = $scope.dashboard.widgets.find(function (w) {
                        return w.id == widgetId;
                    });
                    return widget ? widget.name : '';
                };

                $scope.getDashboardWidget = function (widgetId) {
                    var res = $scope.dashboard.widgets.find(function (w) {
                        return w.id == widgetId;
                    });
                    if (res) res.settings.height = res.settings.height || $scope.DEFAULT_WIDGET_HEIGHT;
                    return res;
                };
            }],

            link: function link(scope, element, attrs) {}
        };
    }]);
})();
'use strict';

function _toConsumableArray(arr) { if (Array.isArray(arr)) { for (var i = 0, arr2 = Array(arr.length); i < arr.length; i++) { arr2[i] = arr[i]; } return arr2; } else { return Array.from(arr); } }

(function () {
    angular.module('irisApp').controller('IrisDashboardSizeCtrl', ["$scope", "$controller", function ($scope, $controller) {
        angular.extend($scope, $controller('IrisDashboardBaseCtrl', { $scope: $scope }));

        $scope.DEFAULT_WIDGET_HEIGHT = 400;
        $scope.DEFAULT_CELL_HEIGHT = 50;
        $scope.DEFAULT_ROW_MARGIN = 10;
        $scope.MIN_WIDGET_HEIGHT = 50;

        $scope.freeExpandLeft = function (row, col) {
            return row.columns.indexOf(col) > 0 ? row.columns[row.columns.indexOf(col) - 1].width - 1 : 0;
        };
        $scope.freeExpandRight = function (row, col) {
            return row.columns.indexOf(col) < row.columns.length - 1 ? row.columns[row.columns.indexOf(col) + 1].width - 1 : 0;
        };

        $scope.getRowHeight = function (row) {
            return Math.max.apply(Math, _toConsumableArray(row.columns.map(function (c) {
                return $scope.getCellHeight(row, c, true);
            })));
        };

        $scope.getCellHeight = function (row, col, noCalc) {
            if (!noCalc && $scope.parentRow && $scope.layout.rows.indexOf(row) == $scope.layout.rows.length - 1) {
                var fullHeight = $scope.getRowHeight($scope.parentRow);
                fullHeight -= $scope.layout.rows.filter(function (r) {
                    return r != row;
                }).map(function (r) {
                    return $scope.getRowHeight(r);
                }).reduce(function (a, b) {
                    return a + b;
                }, 0) + $scope.DEFAULT_ROW_MARGIN * ($scope.layout.rows.length - 1);
                if (col.widgetEntity) col.widgetEntity.settings.height = fullHeight;
                return fullHeight;
            }

            var res = $scope.DEFAULT_CELL_HEIGHT;
            if (col.widgetEntity) res = col.widgetEntity.settings.height;
            if (col.rows && col.rows.length) res = col.rows.map(function (r) {
                return $scope.getRowHeight(r);
            }).reduce(function (a, b) {
                return a + b;
            }, 0) + $scope.DEFAULT_ROW_MARGIN * (col.rows.length - 1);

            if (noCalc) return res;
            return Math.max(res, $scope.getRowHeight(row));
        };

        $scope.resizeRow = function (row, newHeight, saveWidgets) {
            if (!$scope.rowHaveWidget(row)) return;

            row.columns.forEach(function (col) {
                if (col.widgetEntity) {
                    col.widgetEntity.settings.height = Math.max(newHeight, $scope.MIN_WIDGET_HEIGHT);
                    saveWidgets && $scope.saveWidget(col.widgetEntity);
                    return;
                }

                if (!col.rows) return;
                var widgetRows = col.rows.filter(function (r) {
                    return $scope.rowHaveWidget(r);
                });
                if (!widgetRows.length) return;

                var widgetRowsHeight = widgetRows.map(function (r) {
                    return $scope.getRowHeight(r);
                }).reduce(function (a, b) {
                    return a + b;
                }, 0);
                var coef = (newHeight - $scope.getRowHeight(row) + widgetRowsHeight) / widgetRowsHeight;
                widgetRows.forEach(function (r) {
                    return $scope.resizeRow(r, $scope.getRowHeight(r) * coef, saveWidgets);
                });
            });
        };
    }]);
})();
'use strict';

angular.module('irisApp').controller('IrisDashboardWidgetConfigModalCtrl', ["$scope", "widget", "configViewUrl", "configController", function ($scope, widget, configViewUrl, configController) {
    $scope.widget = widget;
    if ($scope.widget && $scope.widget.settings && !$scope.widget.settings.resolution) $scope.widget.settings.resolution = { open: true };
    $scope.configViewUrl = configViewUrl;
    $scope.configController = configController;

    if ($scope.configController && $scope.configViewUrl) {
        $scope.includeTemplate = '<div ng-controller="' + $scope.configController + '" ng-include="configViewUrl"></div>';
    }

    $scope.accept = function () {
        $scope.$close($scope.widget);
    };
}]);
'use strict';

angular.module('irisApp').controller('IrisDashboardWidgetSelectModalCtrl', ["$scope", "$translate", "activeModules", "widgetTypes", function ($scope, $translate, activeModules, widgetTypes) {
    var widgetTypeInModule = function widgetTypeInModule(widgetType, moduleCode) {
        return Array.isArray(widgetType.module) ? widgetType.module.indexOf(moduleCode) >= 0 : widgetType.module == moduleCode;
    };

    $scope.modules = activeModules;
    $scope.widgetTypes = widgetTypes.filter(function (w) {
        return !!activeModules.find(function (m) {
            return widgetTypeInModule(w, m.code);
        });
    });
    $scope.filteredWidgetTypes = $scope.widgetTypes;

    //Added preview file names
    $scope.filteredWidgetTypes.forEach(function (item) {
        item.preview = item.directive.toLowerCase().replace(/-/g, "_").substring(5) + ".png";
    });

    $scope.filterWidgetTypes = function (moduleCode) {
        $scope.selectedModuleCode = moduleCode;
        $scope.filteredWidgetTypes = moduleCode ? $scope.widgetTypes.filter(function (t) {
            return widgetTypeInModule(t, moduleCode);
        }) : $scope.widgetTypes;
    };

    $scope.getWidgetCount = function (moduleCode) {
        return moduleCode ? $scope.widgetTypes.filter(function (t) {
            return widgetTypeInModule(t, moduleCode);
        }).length : $scope.widgetTypes.length;
    };

    $scope.select = function (widgetType) {
        $scope.$close(widgetType);
    };
}]);